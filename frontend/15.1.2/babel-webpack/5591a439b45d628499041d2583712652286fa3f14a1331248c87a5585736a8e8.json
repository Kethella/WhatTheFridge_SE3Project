{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/IdeaPad 100-15IBD/Desktop/HdM/3-Semester/SE3/se3project/Angular/se3-recipe-generator-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/material/snack-bar\";\nimport * as i6 from \"@angular/common\";\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 15);\n  }\n}\nexport class LoginComponent {\n  constructor(_accountService, formBuilder, http, router, snackBar) {\n    this._accountService = _accountService;\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.submitted = false;\n    this.loginForm = new FormGroup({\n      email: new FormControl(),\n      password: new FormControl()\n    });\n    this.queryParams = new HttpParams();\n    this.account = {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      securityQuestion: \"\",\n      securityAnswer: \"\"\n    };\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: [Validators.required, Validators.email, ''],\n      password: [Validators.required, '']\n    });\n  }\n  get f() {\n    return this.loginForm.controls;\n  }\n  login() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.everythingIsFine()) {\n        _this.queryParams = _this.queryParams.append(\"email\", _this.account.email);\n        _this.queryParams = _this.queryParams.append(\"password\", _this.account.password);\n        _this.account = yield _this._accountService.findAccount(_this.queryParams);\n        console.log(_this.account);\n        if (_this.account.id == \"\") {\n          alert(\"User not found. Please check again your email and password.\");\n        } else {\n          if (_this.loginForm.invalid) {\n            return;\n          }\n          _this.loginForm.reset();\n          _this._accountService.sendOwnerAccountToServices(_this.account.id);\n          _this.router.navigate(['home']);\n        }\n      } else {\n        let config = new MatSnackBarConfig();\n        config.panelClass = ['my-snackbar'];\n        _this.snackBar.open(\"Make sure there are no empty fields.\", \"Ok\", config);\n      }\n      /*this.submitted=true;\r\n      if(this.loginForm.invalid){\r\n        return;\r\n      }\r\n            this.queryParams = this.queryParams.append(\"email\", this.account.email);\r\n        this.queryParams = this.queryParams.append(\"password\", this.account.password);\r\n        this.account = await this._accountService.findAccount(this.queryParams);\r\n        if(this.account.id==\"\" || this.account.id==null){\r\n          let config = new MatSnackBarConfig();\r\n          config.panelClass = ['my-snackbar']\r\n          this.snackBar.open(\"Wrong username and/or password.\", \"Ok\", config);\r\n        }\r\n        else{\r\n          this.loginForm.reset();\r\n          this._accountService.sendOwnerAccountToServices(this.account.id);\r\n          this.router.navigate(['home']);\r\n        }\r\n            /*this.http.get<any>(\"http://localhost:8085/api/v1/accounts\")\r\n      .subscribe(res =>{\r\n        let user = res.find((a:Account)=>{\r\n          return a.email === this.loginForm.value.email && a.password === this.loginForm.value.password\r\n        }\r\n        )\r\n        console.log(res)\r\n        if(user){\r\n          alert(\"Login success\")\r\n          console.log(user.id);\r\n          this._accountService.sendOwnerAccountToServices(user.id);\r\n          this.router.navigate(['home']);\r\n        } else{\r\n          alert(\"User not found\")\r\n        }\r\n      },\r\n      err=>{\r\n        alert(\"Something went wrong !!\")\r\n            })*/\n    })();\n  }\n\n  everythingIsFine() {\n    if (this.account.name === \"\") {\n      return false;\n    }\n    if (this.account.email === \"\") {\n      return false;\n    }\n    return true;\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.MatSnackBar));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 26,\n  vars: 3,\n  consts: [[1, \"bg\"], [1, \"container\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"card\"], [1, \"text-center\"], [1, \"sign-up-form\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", \"name\", \"email\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"exampleInputPassword1\", \"name\", \"password\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"routerLink\", \"../sign-up\", 2, \"display\", \"flex\", \"justify-content\", \"flex-end\"], [1, \"invalid-feedback\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h1\");\n      i0.ɵɵtext(7, \"Welcome back.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"h6\");\n      i0.ɵɵtext(9, \"Clean out your fridge and enjoy a delicious meal\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"form\", 6)(11, \"div\", 7)(12, \"label\", 8);\n      i0.ɵɵtext(13, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.account.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 7)(16, \"label\", 10);\n      i0.ɵɵtext(17, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.account.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 1, 0, \"div\", 12);\n      i0.ɵɵelementStart(20, \"div\")(21, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_21_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵtext(22, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"a\", 14);\n      i0.ɵɵtext(24, \" New User? Click to sign up! \");\n      i0.ɵɵelementEnd()()()()()()()();\n      i0.ɵɵelement(25, \"router-outlet\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"ngModel\", ctx.account.email);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.account.password);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f[\"email\"].errors);\n    }\n  },\n  dependencies: [i6.NgIf, i4.RouterOutlet, i4.RouterLink, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm],\n  styles: [\".card[_ngcontent-%COMP%]{\\r\\n    border: none;\\r\\n    border-radius: 25px;\\r\\n    width:500px;\\r\\n    padding:50px;\\r\\n    position: absolute;\\r\\n    top:50%;\\r\\n    left:50%;\\r\\n    transform: translate(-50%, -50%);\\r\\n    background: rgb(230, 244, 246);\\r\\n}\\r\\n\\r\\n.bg[_ngcontent-%COMP%]{\\r\\n    background: rgb(95, 193, 172);\\r\\n    height : 100vh;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9hY2NvdW50LWF1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIsV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsT0FBTztJQUNQLFFBQVE7SUFDUixnQ0FBZ0M7SUFDaEMsOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksNkJBQTZCO0lBQzdCLGNBQWM7QUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZHtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XHJcbiAgICB3aWR0aDo1MDBweDtcclxuICAgIHBhZGRpbmc6NTBweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDo1MCU7XHJcbiAgICBsZWZ0OjUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgYmFja2dyb3VuZDogcmdiKDIzMCwgMjQ0LCAyNDYpO1xyXG59XHJcblxyXG4uYmd7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2IoOTUsIDE5MywgMTcyKTtcclxuICAgIGhlaWdodCA6IDEwMHZoO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAAuCC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACjG,SAAsBC,iBAAiB,QAAQ,6BAA6B;;;;;;;;;;ICgBpDC,0BAEM;;;ADR9B,OAAM,MAAOC,cAAc;EAmBzBC,YAAoBC,eAA+B,EACzCC,WAAwB,EACxBC,IAAe,EACfC,MAAa,EACbC,QAAqB;IAJX,oBAAe,GAAfJ,eAAe;IACzB,gBAAW,GAAXC,WAAW;IACX,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IArBlB,cAAS,GAAE,KAAK;IACT,cAAS,GAAc,IAAIV,SAAS,CAAC;MAC1CW,KAAK,EAAE,IAAIZ,WAAW,EAAE;MACxBa,QAAQ,EAAE,IAAIb,WAAW;KAC1B,CAAC;IAEK,gBAAW,GAAG,IAAID,UAAU,EAAE;IAC9B,YAAO,GAAY;MACxBe,EAAE,EAAE,EAAE;MACNC,IAAI,EAAE,EAAE;MACRH,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZG,gBAAgB,EAAE,EAAE;MACpBC,cAAc,EAAE;KACjB;EAOmC;EAEpCC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACX,WAAW,CAACY,KAAK,CAAC;MACtCR,KAAK,EAAE,CAACV,UAAU,CAACmB,QAAQ,EAAEnB,UAAU,CAACU,KAAK,EAAE,EAAE,CAAC;MAClDC,QAAQ,EAAE,CAACX,UAAU,CAACmB,QAAQ,EAAE,EAAE;KACnC,CAAC;EACJ;EAGA,IAAIC,CAAC;IACH,OAAO,IAAI,CAACH,SAAS,CAACI,QAAQ;EAChC;EAEMC,KAAK;IAAA;IAAA;MACT,IAAG,KAAI,CAACC,gBAAgB,EAAE,EAAC;QAEzB,KAAI,CAACC,WAAW,GAAG,KAAI,CAACA,WAAW,CAACC,MAAM,CAAC,OAAO,EAAE,KAAI,CAACC,OAAO,CAAChB,KAAK,CAAC;QACvE,KAAI,CAACc,WAAW,GAAG,KAAI,CAACA,WAAW,CAACC,MAAM,CAAC,UAAU,EAAE,KAAI,CAACC,OAAO,CAACf,QAAQ,CAAC;QAC7E,KAAI,CAACe,OAAO,SAAS,KAAI,CAACrB,eAAe,CAACsB,WAAW,CAAC,KAAI,CAACH,WAAW,CAAC;QAEvEI,OAAO,CAACC,GAAG,CAAC,KAAI,CAACH,OAAO,CAAC;QAEzB,IAAG,KAAI,CAACA,OAAO,CAACd,EAAE,IAAI,EAAE,EAAC;UACvBkB,KAAK,CAAC,6DAA6D,CAAC;SACrE,MACI;UACH,IAAG,KAAI,CAACb,SAAS,CAACc,OAAO,EAAC;YACxB;;UAEF,KAAI,CAACd,SAAS,CAACe,KAAK,EAAE;UACtB,KAAI,CAAC3B,eAAe,CAAC4B,0BAA0B,CAAC,KAAI,CAACP,OAAO,CAACd,EAAE,CAAC;UAChE,KAAI,CAACJ,MAAM,CAAC0B,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;;OAEjC,MACG;QACF,IAAIC,MAAM,GAAG,IAAIlC,iBAAiB,EAAE;QACpCkC,MAAM,CAACC,UAAU,GAAG,CAAC,aAAa,CAAC;QACnC,KAAI,CAAC3B,QAAQ,CAAC4B,IAAI,CAAC,sCAAsC,EAAE,IAAI,EAAEF,MAAM,CAAC;;MAI1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA;EAuCF;;EAEAZ,gBAAgB;IACd,IAAG,IAAI,CAACG,OAAO,CAACb,IAAI,KAAK,EAAE,EAAC;MAE1B,OAAO,KAAK;;IAEd,IAAG,IAAI,CAACa,OAAO,CAAChB,KAAK,KAAK,EAAE,EAAC;MAE3B,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;;AApHWP,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAmC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb3BxC,8BAAgB;MAMUA,6BAAa;MAAAA,iBAAK;MACtBA,0BAAI;MAAAA,gEAAgD;MAAAA,iBAAK;MAE7DA,gCAA2B;MAEgCA,8BAAa;MAAAA,iBAAQ;MACxEA,iCAAuI;MAA5BA;QAAA;MAAA,EAA2B;MAAtIA,iBAAuI;MAGzIA,+BAAkB;MACsCA,yBAAQ;MAAAA,iBAAQ;MACtEA,kCAAsH;MAA/BA;QAAA;MAAA,EAA8B;MAArHA,iBAAsH;MAExHA,kEAEM;MACNA,4BAAK;MAC2CA;QAAA,OAASyC,WAAO;MAAA,EAAC;MAACzC,sBAAK;MAAAA,iBAAS;MAC9EA,8BAA4E;MAACA,8CAA4B;MAAAA,iBAAI;MASnIA,iCAA+B;;;MArBkGA,gBAA2B;MAA3BA,2CAA2B;MAK/CA,eAA8B;MAA9BA,8CAA8B;MAEjHA,eAAoC;MAApCA,6DAAoC","names":["HttpParams","FormControl","FormGroup","Validators","MatSnackBarConfig","i0","LoginComponent","constructor","_accountService","formBuilder","http","router","snackBar","email","password","id","name","securityQuestion","securityAnswer","ngOnInit","loginForm","group","required","f","controls","login","everythingIsFine","queryParams","append","account","findAccount","console","log","alert","invalid","reset","sendOwnerAccountToServices","navigate","config","panelClass","open","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\account-auth\\login\\login.component.ts","C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\account-auth\\login\\login.component.html"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { Account } from 'src/app/models/account';\r\nimport { AccountService } from 'src/app/services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  submitted= false;\r\n  public loginForm: FormGroup = new FormGroup({\r\n    email: new FormControl(),\r\n    password: new FormControl()\r\n  });\r\n\r\n  public queryParams = new HttpParams();\r\n  public account: Account = {\r\n    id: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    securityQuestion: \"\",\r\n    securityAnswer: \"\"\r\n  }\r\n\r\n\r\n  constructor(private _accountService: AccountService,\r\n    private formBuilder: FormBuilder,\r\n    private http:HttpClient,\r\n    private router:Router,\r\n    private snackBar: MatSnackBar ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      email :[Validators.required, Validators.email, ''],\r\n      password: [Validators.required, ''],\r\n    })\r\n  }\r\n\r\n\r\n  get f(): { [key: string]: AbstractControl } {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  async login(){\r\n    if(this.everythingIsFine()){\r\n\r\n      this.queryParams = this.queryParams.append(\"email\", this.account.email);\r\n      this.queryParams = this.queryParams.append(\"password\", this.account.password);\r\n      this.account = await this._accountService.findAccount(this.queryParams);\r\n\r\n      console.log(this.account)\r\n\r\n      if(this.account.id == \"\"){\r\n        alert(\"User not found. Please check again your email and password.\")\r\n      }\r\n      else {\r\n        if(this.loginForm.invalid){\r\n          return;\r\n        }\r\n        this.loginForm.reset();\r\n        this._accountService.sendOwnerAccountToServices(this.account.id);\r\n        this.router.navigate(['home']);\r\n      }\r\n    }\r\n    else{\r\n      let config = new MatSnackBarConfig();\r\n      config.panelClass = ['my-snackbar']\r\n      this.snackBar.open(\"Make sure there are no empty fields.\", \"Ok\", config);\r\n\r\n    }\r\n\r\n    /*this.submitted=true;\r\n    if(this.loginForm.invalid){\r\n      return;\r\n    }\r\n\r\n    this.queryParams = this.queryParams.append(\"email\", this.account.email);\r\n      this.queryParams = this.queryParams.append(\"password\", this.account.password);\r\n      this.account = await this._accountService.findAccount(this.queryParams);\r\n      if(this.account.id==\"\" || this.account.id==null){\r\n        let config = new MatSnackBarConfig();\r\n        config.panelClass = ['my-snackbar']\r\n        this.snackBar.open(\"Wrong username and/or password.\", \"Ok\", config);\r\n      }\r\n      else{\r\n        this.loginForm.reset();\r\n        this._accountService.sendOwnerAccountToServices(this.account.id);\r\n        this.router.navigate(['home']);\r\n      }\r\n\r\n    /*this.http.get<any>(\"http://localhost:8085/api/v1/accounts\")\r\n    .subscribe(res =>{\r\n      let user = res.find((a:Account)=>{\r\n        return a.email === this.loginForm.value.email && a.password === this.loginForm.value.password\r\n      }\r\n      )\r\n      console.log(res)\r\n      if(user){\r\n        alert(\"Login success\")\r\n        console.log(user.id);\r\n        this._accountService.sendOwnerAccountToServices(user.id);\r\n        this.router.navigate(['home']);\r\n      } else{\r\n        alert(\"User not found\")\r\n      }\r\n    },\r\n    err=>{\r\n      alert(\"Something went wrong !!\")\r\n\r\n    })*/\r\n  }\r\n\r\n  everythingIsFine(): boolean {\r\n    if(this.account.name === \"\"){\r\n\r\n      return false;\r\n    }\r\n    if(this.account.email === \"\"){\r\n\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n","<div class=\"bg\">\r\n  <div class=\"container\">\r\n      <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n              <div class=\"card\">\r\n                  <div class=\"text-center\">\r\n                      <h1>Welcome back.</h1>\r\n                      <h6>Clean out your fridge and enjoy a delicious meal</h6>\r\n                  </div>\r\n                  <form class=\"sign-up-form\">\r\n                      <div class=\"mb-3\">\r\n                          <label for=\"exampleInputEmail1\" class=\"form-label\">Email address</label>\r\n                          <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" name=\"email\" [(ngModel)]=\"account.email\">\r\n\r\n                       </div>\r\n                        <div class=\"mb-3\">\r\n                          <label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\r\n                          <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" name=\"password\" [(ngModel)]=\"account.password\">\r\n                        </div>\r\n                        <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n\r\n                        </div>\r\n                        <div>\r\n                          <button type=\"button\" class=\"btn btn-primary\" (click)=\"login()\">Login</button>\r\n                          <a style=\"display: flex; justify-content: flex-end\" routerLink=\"../sign-up\"> New User? Click to sign up! </a>\r\n                        </div>\r\n                  </form>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n  </div>\r\n\r\n    <router-outlet></router-outlet>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}