{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/IdeaPad 100-15IBD/Desktop/HdM/3-Semester/SE3/se3project/Angular/se3-recipe-generator-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nlet AccountService = class AccountService {\n  constructor(http, _fridgeService, _recipeService) {\n    this.http = http;\n    this._fridgeService = _fridgeService;\n    this._recipeService = _recipeService;\n    this.ownerAccountId = \"2238550034095900\"; //todo: change back to empty string\n    this._baseUrl = \"http://localhost:8085/api/v1/accounts\";\n  }\n  createAccount(account) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this.http.post(_this._baseUrl, account));\n    })();\n  }\n  findAccount(queryParams) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this2.http.get(\"http://localhost:8085/api/v1/accounts/one/\", {\n        params: queryParams\n      }));\n    })();\n  }\n  getSecurityQuestions() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this3.http.get(\"http://localhost:8085/api/v1/securityQuestions\"));\n    })();\n  }\n  sendOwnerAccountToServices(oa) {\n    this.ownerAccountId = oa;\n    this._fridgeService.setOwnerAccount(oa);\n    this._recipeService.setOwnerAccount(oa);\n  }\n  getAccountInfo() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this4.http.get(`${_this4._baseUrl}/${_this4.ownerAccountId}`));\n    })();\n  }\n  updateAccountInfo(account) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this5.http.put(`${_this5._baseUrl}/${_this5.ownerAccountId}`, account));\n    })();\n  }\n  deleteAccount() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this6.http.delete(`${_this6._baseUrl}/${_this6.ownerAccountId}`));\n    })();\n  }\n};\nAccountService = __decorate([Injectable({\n  providedIn: 'root'\n})], AccountService);\nexport { AccountService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAqBC,WAAW,QAAoB,sBAAsB;AAG1E,SAASC,cAAc,QAAQ,MAAM;AAKrC,MAAMC,WAAW,GAAG;EAChBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAKI,IAAMI,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAoBC,IAAgB,EAC1BC,cAA6B,EAC7BC,cAA6B;IAFnB,SAAI,GAAJF,IAAI;IACd,mBAAc,GAAdC,cAAc;IACd,mBAAc,GAAdC,cAAc;IANhB,mBAAc,GAAW,kBAAkB,EAAC;IAC5C,aAAQ,GAAG,uCAAuC;EAKf;EAErCC,aAAa,CAACC,OAAgB;IAAA;IAAA;MAClC,OAAOT,cAAc,CAAC,KAAI,CAACK,IAAI,CAACK,IAAI,CAAU,KAAI,CAACC,QAAQ,EAAEF,OAAO,CAAC,CAAC;IAAC;EACzE;EAEMG,WAAW,CAACC,WAAuB;IAAA;IAAA;MACvC,OAAOb,cAAc,CAAC,MAAI,CAACK,IAAI,CAACS,GAAG,CAAU,4CAA4C,EAAE;QAACC,MAAM,EAACF;MAAW,CAAC,CAAC,CAAC;IAAC;EACpH;EAEMG,oBAAoB;IAAA;IAAA;MACxB,OAAOhB,cAAc,CAAC,MAAI,CAACK,IAAI,CAACS,GAAG,CAAsB,gDAAgD,CAAC,CAAC;IAAC;EAC9G;EAEAG,0BAA0B,CAACC,EAAU;IACnC,IAAI,CAACC,cAAc,GAAGD,EAAE;IACxB,IAAI,CAACZ,cAAc,CAACc,eAAe,CAACF,EAAE,CAAC;IACvC,IAAI,CAACX,cAAc,CAACa,eAAe,CAACF,EAAE,CAAC;EACzC;EAGMG,cAAc;IAAA;IAAA;MAClB,OAAOrB,cAAc,CAAC,MAAI,CAACK,IAAI,CAACS,GAAG,CAAU,GAAG,MAAI,CAACH,QAAQ,IAAI,MAAI,CAACQ,cAAc,EAAE,CAAC,CAAC;IAAA;EAC1F;EAEMG,iBAAiB,CAACb,OAAgB;IAAA;IAAA;MACtC,OAAOT,cAAc,CAAC,MAAI,CAACK,IAAI,CAACkB,GAAG,CAAC,GAAG,MAAI,CAACZ,QAAQ,IAAI,MAAI,CAACQ,cAAc,EAAE,EAAEV,OAAO,CAAC,CAAC;IAAA;EAC1F;EAEMe,aAAa;IAAA;IAAA;MACjB,OAAOxB,cAAc,CAAC,MAAI,CAACK,IAAI,CAACoB,MAAM,CAAC,GAAG,MAAI,CAACd,QAAQ,IAAI,MAAI,CAACQ,cAAc,EAAE,CAAC,CAAC;IAAA;EACpF;CACD;AAxCYhB,cAAc,eAH1BL,UAAU,CAAC;EACV4B,UAAU,EAAE;CACb,CAAC,GACWvB,cAAc,CAwC1B;SAxCYA,cAAc","names":["Injectable","HttpHeaders","firstValueFrom","httpOptions","headers","AccountService","constructor","http","_fridgeService","_recipeService","createAccount","account","post","_baseUrl","findAccount","queryParams","get","params","getSecurityQuestions","sendOwnerAccountToServices","oa","ownerAccountId","setOwnerAccount","getAccountInfo","updateAccountInfo","put","deleteAccount","delete","providedIn"],"sourceRoot":"","sources":["C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Account } from '../models/account'\r\nimport { ISecurityQuestion } from '../models/securityQuestions';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { RecipeService } from './recipe.service';\r\nimport { FridgeService } from './fridge.service';\r\n\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n\r\n  private ownerAccountId: string = \"2238550034095900\" //todo: change back to empty string\r\n  private _baseUrl = \"http://localhost:8085/api/v1/accounts\";\r\n\r\n\r\n  constructor(private http: HttpClient,\r\n    private _fridgeService: FridgeService,\r\n    private _recipeService: RecipeService) { }\r\n\r\n  async createAccount(account: Account): Promise<Account> {\r\n    return firstValueFrom(this.http.post<Account>(this._baseUrl, account));\r\n  }\r\n\r\n  async findAccount(queryParams: HttpParams): Promise<Account> {\r\n    return firstValueFrom(this.http.get<Account>(\"http://localhost:8085/api/v1/accounts/one/\", {params:queryParams}));\r\n  }\r\n\r\n  async getSecurityQuestions(): Promise<ISecurityQuestion[]> {\r\n    return firstValueFrom(this.http.get<ISecurityQuestion[]>(\"http://localhost:8085/api/v1/securityQuestions\"));\r\n  }\r\n\r\n  sendOwnerAccountToServices(oa: string): void {\r\n    this.ownerAccountId = oa;\r\n    this._fridgeService.setOwnerAccount(oa);\r\n    this._recipeService.setOwnerAccount(oa);\r\n  }\r\n\r\n\r\n  async getAccountInfo(): Promise<Account> {\r\n    return firstValueFrom(this.http.get<Account>(`${this._baseUrl}/${this.ownerAccountId}`))\r\n  }\r\n\r\n  async updateAccountInfo(account: Account): Promise<any> {\r\n    return firstValueFrom(this.http.put(`${this._baseUrl}/${this.ownerAccountId}`, account))\r\n  }\r\n\r\n  async deleteAccount(): Promise<any> {\r\n    return firstValueFrom(this.http.delete(`${this._baseUrl}/${this.ownerAccountId}`))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}