{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/IdeaPad 100-15IBD/Desktop/HdM/3-Semester/SE3/se3project/Angular/se3-recipe-generator-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatTable } from '@angular/material/table';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/recipe.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/core\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/chips\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/table\";\nfunction EditRecipeComponent_th_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 31);\n    i0.ɵɵtext(1, \"Ingredient\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditRecipeComponent_td_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r9.ingredientName, \" \");\n  }\n}\nfunction EditRecipeComponent_th_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 31);\n    i0.ɵɵtext(1, \"Amount\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditRecipeComponent_td_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r10.ingredientAmount, \" \");\n  }\n}\nfunction EditRecipeComponent_tr_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 33);\n  }\n}\nfunction EditRecipeComponent_tr_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 34);\n  }\n}\nfunction EditRecipeComponent_mat_option_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r12.text);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r12.text, \" \");\n  }\n}\nfunction EditRecipeComponent_mat_chip_row_54_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip-row\", 36);\n    i0.ɵɵlistener(\"removed\", function EditRecipeComponent_mat_chip_row_54_Template_mat_chip_row_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const tag_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.remove(tag_r13));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 37)(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tag_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r13.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"remove \" + tag_r13);\n  }\n}\nexport class EditRecipeComponent {\n  constructor(dialogRef, data, _formBuilder, _recipeService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this._formBuilder = _formBuilder;\n    this._recipeService = _recipeService;\n    this.selectedCategory = {\n      \"enumValue\": \"\",\n      \"text\": \"\"\n    };\n    this.displayedColumns = ['ingredientName', 'ingredientAmount'];\n    this.visible = true;\n    this.selectable = true;\n    this.removable = true;\n    this.addOnBlur = true;\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.tagsArray = [];\n    this.ingredientNames = [];\n    this.ingredientAmounts = [];\n    this.ingredients = [];\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.recipeForm = _this._formBuilder.group({\n        ingredientName: [null, Validators.required],\n        ingredientAmount: [null, Validators.required],\n        name: [null, Validators.required],\n        category: [null, Validators.required],\n        tags: [null, Validators.required],\n        instructions: [null, Validators.required]\n      });\n      _this.categories = yield _this._recipeService.getCategories();\n    })();\n  }\n  onCloseClick() {\n    this.dialogRef.close();\n  }\n  onSubmit() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.recipe = {\n        id: '',\n        name: 'neshto novo',\n        category: 'MAINCOURSE',\n        instructions: 'idk',\n        image: 'http://localhost:8085/media/download/63c95e3d664c9260ee663f9c',\n        tags: _this2.recipeForm.get('tags')?.value,\n        link: '',\n        ingredientMeasures: [\"manja\", \"o6te ne6to\"],\n        ingredientNames: [\"1\", \"1\"],\n        ownerAccount: ''\n      };\n      _this2.recipe = yield _this2._recipeService.updateRecipe(_this2.recipe);\n      console.log(_this2.recipe);\n      _this2.dialogRef.close();\n    })();\n  }\n  onAdd() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var name = _this3.recipeForm.get(\"ingredientName\")?.value;\n      var amount = _this3.recipeForm.get(\"ingredientAmount\")?.value;\n      console.log(name);\n      _this3.ingredientNames.push(name);\n      _this3.ingredientAmounts.push(amount);\n      const ingredient = {\n        ingredientName: name,\n        ingredientAmount: amount\n      };\n      _this3.ingredients.push(ingredient);\n      _this3.table.renderRows();\n    })();\n  }\n  setSelectedCategory(categories, selectedCategory) {\n    for (let category of categories) {\n      if (selectedCategory.text == category.text) {\n        selectedCategory.enumValue = category.enumValue;\n      }\n    }\n    return selectedCategory;\n  }\n  add(event) {\n    const input = event.input;\n    const value = event.value;\n    if ((value || '').trim()) {\n      this.tagsArray.push({\n        name: value.trim()\n      });\n    }\n    if (input) {\n      input.value = '';\n    }\n  }\n  remove(tag) {\n    const index = this.tagsArray.indexOf(tag);\n    if (index >= 0) {\n      this.tagsArray.splice(index, 1);\n    }\n  }\n}\nEditRecipeComponent.ɵfac = function EditRecipeComponent_Factory(t) {\n  return new (t || EditRecipeComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.RecipeService));\n};\nEditRecipeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditRecipeComponent,\n  selectors: [[\"app-edit-recipe\"]],\n  viewQuery: function EditRecipeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatTable, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n    }\n  },\n  decls: 68,\n  vars: 10,\n  consts: [[\"id\", \"dialog-header\"], [\"mat-dialog-title\", \"\", \"id\", \"recipeName\"], [\"id\", \"actions\"], [\"mat-mini-fab\", \"\", \"mat-dialog-close\", \"\", \"id\", \"close-button\", 3, \"click\"], [\"id\", \"ingredients\"], [3, \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"required\", \"\"], [1, \"add\"], [\"matInput\", \"\", \"formControlName\", \"ingredientName\", \"required\", \"\"], [\"matInput\", \"\", \"formControlName\", \"ingredientAmount\", \"required\", \"\"], [\"mat-raised-button\", \"\", 1, \"addButton\", 3, \"click\"], [\"mat-table\", \"\", \"id\", \"table\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [\"matColumnDef\", \"ingredientName\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"ingredientAmount\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [1, \"spacer\"], [\"appearance\", \"fill\"], [\"formControlName\", \"category\", 3, \"value\", \"valueChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"example-chip-list\"], [\"chipGrid\", \"\"], [3, \"removed\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Add tag\", \"formControlName\", \"tags\", 3, \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputAddOnBlur\", \"matChipInputTokenEnd\"], [\"appearance\", \"fill\", 1, \"instructions\"], [\"matInput\", \"\", \"formControlName\", \"instructions\"], [\"id\", \"action-buttons\"], [\"mat-raised-button\", \"\"], [\"mat\", \"\", \"mat-raised-button\", \"\", \"id\", \"create-btn\", 3, \"click\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [3, \"value\"], [3, \"removed\"], [\"matChipRemove\", \"\"]],\n  template: function EditRecipeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵtext(2, \"Create Custom Recipe\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-dialog-actions\", 2)(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function EditRecipeComponent_Template_button_click_4_listener() {\n        return ctx.onCloseClick();\n      });\n      i0.ɵɵelementStart(5, \"mat-icon\");\n      i0.ɵɵtext(6, \"close\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(7, \"mat-dialog-content\")(8, \"div\", 4)(9, \"form\", 5)(10, \"h3\");\n      i0.ɵɵtext(11, \"Name your recipe\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\")(13, \"mat-label\");\n      i0.ɵɵtext(14, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 7)(17, \"h3\");\n      i0.ɵɵtext(18, \"Add Ingredients\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"mat-form-field\")(20, \"mat-label\");\n      i0.ɵɵtext(21, \"Ingredient\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"mat-form-field\")(24, \"mat-label\");\n      i0.ɵɵtext(25, \"Amount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function EditRecipeComponent_Template_button_click_27_listener() {\n        return ctx.onAdd();\n      });\n      i0.ɵɵtext(28, \"Add\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(29, \"table\", 11);\n      i0.ɵɵelementContainerStart(30, 12);\n      i0.ɵɵtemplate(31, EditRecipeComponent_th_31_Template, 2, 0, \"th\", 13);\n      i0.ɵɵtemplate(32, EditRecipeComponent_td_32_Template, 2, 1, \"td\", 14);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(33, 15);\n      i0.ɵɵtemplate(34, EditRecipeComponent_th_34_Template, 2, 0, \"th\", 13);\n      i0.ɵɵtemplate(35, EditRecipeComponent_td_35_Template, 2, 1, \"td\", 14);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(36, EditRecipeComponent_tr_36_Template, 1, 0, \"tr\", 16);\n      i0.ɵɵtemplate(37, EditRecipeComponent_tr_37_Template, 1, 0, \"tr\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(38, \"div\", 18);\n      i0.ɵɵelementStart(39, \"h3\");\n      i0.ɵɵtext(40, \"Categories\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"mat-form-field\", 19)(42, \"mat-label\");\n      i0.ɵɵtext(43, \"Category\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"mat-select\", 20);\n      i0.ɵɵlistener(\"valueChange\", function EditRecipeComponent_Template_mat_select_valueChange_44_listener($event) {\n        return ctx.selectedCategory.text = $event;\n      });\n      i0.ɵɵelementStart(45, \"mat-option\");\n      i0.ɵɵtext(46, \"All\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(47, EditRecipeComponent_mat_option_47_Template, 2, 2, \"mat-option\", 21);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(48, \"div\", 18);\n      i0.ɵɵelementStart(49, \"h3\");\n      i0.ɵɵtext(50, \"Tags\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(51, \"mat-form-field\", 22)(52, \"mat-chip-grid\", null, 23);\n      i0.ɵɵtemplate(54, EditRecipeComponent_mat_chip_row_54_Template, 5, 2, \"mat-chip-row\", 24);\n      i0.ɵɵelementStart(55, \"input\", 25);\n      i0.ɵɵlistener(\"matChipInputTokenEnd\", function EditRecipeComponent_Template_input_matChipInputTokenEnd_55_listener($event) {\n        return ctx.add($event);\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(56, \"div\", 18);\n      i0.ɵɵelementStart(57, \"h3\");\n      i0.ɵɵtext(58, \"Instructions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(59, \"mat-form-field\", 26)(60, \"mat-label\");\n      i0.ɵɵtext(61, \"Instructions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(62, \"textarea\", 27);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(63, \"div\", 28)(64, \"button\", 29);\n      i0.ɵɵtext(65, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(66, \"button\", 30);\n      i0.ɵɵlistener(\"click\", function EditRecipeComponent_Template_button_click_66_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(67, \"Edit\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r7 = i0.ɵɵreference(53);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.recipeForm);\n      i0.ɵɵadvance(20);\n      i0.ɵɵproperty(\"dataSource\", ctx.ingredients);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"value\", ctx.selectedCategory.text);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tagsArray);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matChipInputFor\", _r7)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes)(\"matChipInputAddOnBlur\", ctx.addOnBlur);\n    }\n  },\n  dependencies: [i4.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i5.MatOption, i6.MatButton, i6.MatMiniFabButton, i7.MatChipGrid, i7.MatChipInput, i7.MatChipRemove, i7.MatChipRow, i1.MatDialogClose, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i8.MatIcon, i9.MatInput, i10.MatFormField, i10.MatLabel, i11.MatSelect, i12.MatTable, i12.MatHeaderCellDef, i12.MatHeaderRowDef, i12.MatColumnDef, i12.MatCellDef, i12.MatRowDef, i12.MatHeaderCell, i12.MatCell, i12.MatHeaderRow, i12.MatRow, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["COMMA","ENTER","Validators","MAT_DIALOG_DATA","MatTable","i0","EditRecipeComponent","constructor","dialogRef","data","_formBuilder","_recipeService","ingredientNames","ingredientAmounts","ingredients","ngOnInit","recipeForm","group","ingredientName","required","ingredientAmount","name","category","tags","instructions","categories","getCategories","onCloseClick","close","onSubmit","recipe","id","image","get","value","link","ingredientMeasures","ownerAccount","updateRecipe","console","log","onAdd","amount","push","ingredient","table","renderRows","setSelectedCategory","selectedCategory","text","enumValue","add","event","input","trim","tagsArray","remove","tag","index","indexOf","splice","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\my-recipes\\edit-recipe\\edit-recipe.component.ts","C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\my-recipes\\edit-recipe\\edit-recipe.component.html"],"sourcesContent":["import { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { Component, ViewChild, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatTable } from '@angular/material/table';\r\nimport { ICategory } from 'src/app/models/category';\r\nimport { Recipe } from 'src/app/models/recipe';\r\nimport { RecipeService } from 'src/app/services/recipe.service';\r\nimport { CreateRecipeComponent } from '../create-recipe/create-recipe.component';\r\n\r\n@Component({\r\n  selector: 'app-edit-recipe',\r\n  templateUrl: './edit-recipe.component.html',\r\n  styleUrls: ['./edit-recipe.component.css']\r\n})\r\nexport class EditRecipeComponent {\r\n  recipeForm: FormGroup;\r\n\r\n  recipe: Recipe;\r\n  ingredientNames: String[];\r\n  ingredientAmounts: String[];\r\n  ingredients: Ingredient[];\r\n  selectedCategory: ICategory = {\"enumValue\": \"\", \"text\":\"\"};\r\n  categories: ICategory[];\r\n\r\n  displayedColumns: string[] = ['ingredientName', 'ingredientAmount'];\r\n\r\n  @ViewChild(MatTable) table: MatTable<Ingredient>;\r\n\r\n  constructor(public dialogRef:MatDialogRef<CreateRecipeComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data:any,\r\n    private _formBuilder: FormBuilder,\r\n    private _recipeService:RecipeService){\r\n\r\n      this.ingredientNames = []\r\n      this.ingredientAmounts = []\r\n      this.ingredients = []\r\n }\r\n\r\n  async ngOnInit(){\r\n  this.recipeForm=this._formBuilder.group({\r\n    ingredientName:[null, Validators.required],\r\n    ingredientAmount:[null, Validators.required],\r\n    name:[null, Validators.required],\r\n    category:[null, Validators.required],\r\n    tags:[null, Validators.required],\r\n    instructions:[null, Validators.required],\r\n\r\n  })\r\n  this.categories = await this._recipeService.getCategories();\r\n }\r\n\r\n  onCloseClick() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  async onSubmit(){\r\n\r\n    this.recipe={\r\n      id: '',\r\n      name:'neshto novo',\r\n      category:'MAINCOURSE',\r\n      instructions:'idk',\r\n      image:'http://localhost:8085/media/download/63c95e3d664c9260ee663f9c',\r\n      tags: this.recipeForm.get('tags')?.value,\r\n      link:'',\r\n      ingredientMeasures: [\"manja\", \"o6te ne6to\"],\r\n      ingredientNames: [\"1\", \"1\"],\r\n      ownerAccount:''\r\n    }\r\n\r\n    this.recipe = await this._recipeService.updateRecipe(this.recipe);\r\n    console.log(this.recipe)\r\n    this.dialogRef.close()\r\n }\r\n\r\n  async onAdd(){\r\n\r\n      var name = this.recipeForm.get(\"ingredientName\")?.value\r\n      var amount = this.recipeForm.get(\"ingredientAmount\")?.value\r\n      console.log(name)\r\n      this.ingredientNames.push(name)\r\n      this.ingredientAmounts.push(amount)\r\n      const ingredient: Ingredient = {\r\n        ingredientName: name,\r\n        ingredientAmount: amount\r\n      }\r\n      this.ingredients.push(ingredient)\r\n      this.table.renderRows();\r\n\r\n  }\r\n\r\n  setSelectedCategory(categories: ICategory[], selectedCategory: ICategory): ICategory{\r\n\r\n    for (let category of categories){\r\n      if (selectedCategory.text == category.text){\r\n        selectedCategory.enumValue = category.enumValue;\r\n      }\r\n    }\r\n    return selectedCategory;\r\n  }\r\n\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  tagsArray: Tags[]=[];\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    if ((value || '').trim()) {\r\n      this.tagsArray.push({name: value.trim()});\r\n    }\r\n\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  remove(tag: Tags): void {\r\n    const index = this.tagsArray.indexOf(tag);\r\n\r\n    if (index >= 0) {\r\n      this.tagsArray.splice(index, 1);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nexport interface Ingredient {\r\n  ingredientName: string;\r\n  ingredientAmount: number;\r\n}\r\n\r\nexport interface Tags{\r\n  name: string;\r\n}\r\n\r\n\r\n","<div id=\"dialog-header\">\r\n    <h3 mat-dialog-title id=\"recipeName\">Create Custom Recipe</h3>\r\n\r\n    <mat-dialog-actions id=\"actions\">\r\n      <button mat-mini-fab mat-dialog-close id=\"close-button\" (click)=\"onCloseClick()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n</div>\r\n\r\n<mat-dialog-content>\r\n\r\n  <div id=\"ingredients\">\r\n\r\n    \r\n\r\n    <form [formGroup]=\"recipeForm\">\r\n\r\n      <h3>Name your recipe</h3>\r\n      <mat-form-field>\r\n        <mat-label>Name</mat-label>\r\n        <input matInput formControlName=\"name\" required>\r\n      </mat-form-field>\r\n\r\n      <div class=\"add\">\r\n        \r\n          <h3>Add Ingredients</h3>\r\n            <mat-form-field>\r\n              <mat-label>Ingredient</mat-label>\r\n              <input matInput formControlName=\"ingredientName\" required>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field>\r\n              <mat-label>Amount</mat-label>\r\n              <input matInput formControlName=\"ingredientAmount\" required>\r\n            </mat-form-field>\r\n        \r\n        \r\n      \r\n      <button mat-raised-button (click)=\"onAdd()\" class=\"addButton\">Add</button>\r\n      </div>\r\n\r\n      <table mat-table [dataSource]=\"ingredients\" class=\"mat-elevation-z8\" id=\"table\" >\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"ingredientName\">\r\n          <th mat-header-cell *matHeaderCellDef>Ingredient</th>\r\n          <td mat-cell *matCellDef=\"let element\"> {{element.ingredientName}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Position Column -->\r\n        <ng-container matColumnDef=\"ingredientAmount\">\r\n          <th mat-header-cell *matHeaderCellDef>Amount</th>\r\n          <td mat-cell *matCellDef=\"let element\"> {{element.ingredientAmount}} </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n      </table>\r\n\r\n      <div class=\"spacer\"></div>\r\n\r\n        <h3>Categories</h3>\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label>Category</mat-label>\r\n          <mat-select formControlName=\"category\" [(value)]=\"selectedCategory.text\">\r\n            <mat-option>All</mat-option>\r\n            <mat-option *ngFor=\"let category of categories\" [value]=\"category.text\">\r\n              {{category.text}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n      <div class=\"spacer\"></div>\r\n\r\n        <h3>Tags</h3>\r\n        <mat-form-field class=\"example-chip-list\">\r\n          <mat-chip-grid #chipGrid>\r\n            <mat-chip-row *ngFor=\"let tag of tagsArray\"\r\n                          (removed)=\"remove(tag)\">\r\n              {{tag.name}}\r\n              <button matChipRemove [attr.aria-label]=\"'remove ' + tag\">\r\n                <mat-icon>cancel</mat-icon>\r\n              </button>\r\n            </mat-chip-row>\r\n            <input placeholder=\"Add tag\"\r\n                  [matChipInputFor]=\"chipGrid\"\r\n                  [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                  [matChipInputAddOnBlur]=\"addOnBlur\"\r\n                  (matChipInputTokenEnd)=\"add($event)\"\r\n                  formControlName=\"tags\"/>\r\n          </mat-chip-grid>\r\n        </mat-form-field>\r\n        \r\n        <div class=\"spacer\"></div>\r\n\r\n        <h3>Instructions</h3>\r\n        <mat-form-field appearance=\"fill\" class=\"instructions\">\r\n          <mat-label>Instructions</mat-label>\r\n          <textarea matInput formControlName=\"instructions\"></textarea>\r\n        </mat-form-field>\r\n        \r\n    </form>\r\n  </div>\r\n\r\n\r\n  <div id=\"action-buttons\">\r\n    <button mat-raised-button>Cancel</button>\r\n    <button mat mat-raised-button id=\"create-btn\" (click)=\"onSubmit()\">Edit</button>\r\n  </div>\r\n\r\n\r\n\r\n</mat-dialog-content>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}