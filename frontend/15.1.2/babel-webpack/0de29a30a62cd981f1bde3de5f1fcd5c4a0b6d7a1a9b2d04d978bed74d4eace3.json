{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\nfunction RecipeDetailsComponent_li_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ingredient_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ingredient_r2, \" \");\n  }\n}\nfunction RecipeDetailsComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tags_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(tags_r3);\n  }\n}\nexport class RecipeDetailsComponent {\n  constructor(dialogRef, data) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.icon = 'favorite_border';\n    this.ingredients = [];\n    this.ingredientsAsStrings = [];\n  }\n  onNoClick() {\n    this.dialogRef.close();\n  }\n  markFavourite(newIcon) {\n    this.icon = newIcon;\n  }\n  ngOnInit() {\n    this.selectedRecipe = this.data.selectedRecipe;\n    this.ingredients = this.generateIngredients(this.selectedRecipe);\n    this.ingredientsAsStrings = this.generateIngredientsAsStrings(this.ingredients);\n  }\n  onCloseClick() {\n    this.dialogRef.close();\n  }\n  generateIngredients(recipe) {\n    recipe.ingredientNames.forEach((value, index) => {\n      var temp = {\n        \"name\": value,\n        \"measure\": recipe.ingredientMeasures[index]\n      };\n      this.ingredients.push(temp);\n    });\n    return this.ingredients;\n  }\n  generateIngredientsAsStrings(ingredients) {\n    ingredients.forEach(value => {\n      var temp = value.name;\n      if (value.measure != \"\" && value.measure != null) {\n        temp = temp.concat(\" - \" + value.measure);\n      }\n      this.ingredientsAsStrings.push(temp);\n    });\n    return this.ingredientsAsStrings;\n  }\n}\nRecipeDetailsComponent.ɵfac = function RecipeDetailsComponent_Factory(t) {\n  return new (t || RecipeDetailsComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\nRecipeDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RecipeDetailsComponent,\n  selectors: [[\"app-recipe-details\"]],\n  decls: 20,\n  vars: 5,\n  consts: [[\"id\", \"dialog-header\"], [\"mat-dialog-title\", \"\", \"id\", \"recipeName\"], [\"id\", \"actions\"], [\"mat-mini-fab\", \"\", \"mat-dialog-close\", \"\", \"id\", \"close-button\"], [1, \"mat-typography\"], [\"id\", \"image-ingredients\"], [1, \"centeredImage\", 3, \"src\"], [\"id\", \"ingredientsHeader\", 1, \"headers\"], [2, \"list-style-type\", \"circle\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-button\", \"\", \"class\", \"tag-button\", 4, \"ngFor\", \"ngForOf\"], [1, \"headers\"], [\"id\", \"recipe-description\"], [\"mat-button\", \"\", 1, \"tag-button\"]],\n  template: function RecipeDetailsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-dialog-actions\", 2)(4, \"button\", 3)(5, \"mat-icon\");\n      i0.ɵɵtext(6, \"close\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(7, \"mat-dialog-content\", 4)(8, \"div\", 5);\n      i0.ɵɵelement(9, \"img\", 6);\n      i0.ɵɵelementStart(10, \"div\")(11, \"h4\", 7);\n      i0.ɵɵtext(12, \" Here's what you need!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"ul\", 8);\n      i0.ɵɵtemplate(14, RecipeDetailsComponent_li_14_Template, 2, 1, \"li\", 9);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(15, RecipeDetailsComponent_button_15_Template, 2, 1, \"button\", 10);\n      i0.ɵɵelementStart(16, \"h4\", 11);\n      i0.ɵɵtext(17, \"How to make it: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"p\", 12);\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.selectedRecipe.name);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"src\", ctx.selectedRecipe.image, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ingredientsAsStrings);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.selectedRecipe.tags);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.selectedRecipe.instructions);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.MatButton, i3.MatMiniFabButton, i1.MatDialogClose, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i4.MatIcon],\n  styles: [\"#dialog-header[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    justify-content: space-between;\\r\\n}\\r\\n\\r\\n#recipeName[_ngcontent-%COMP%] {\\r\\n    width: 800px;\\r\\n}\\r\\n\\r\\n.centeredImage[_ngcontent-%COMP%] {\\r\\n    margin: 10px auto 20px;\\r\\n    display: block;\\r\\n    border-radius: 15px;\\r\\n}\\r\\n\\r\\n.headers[_ngcontent-%COMP%]{\\r\\n    font-weight: bold;\\r\\n    padding-top: 15px;\\r\\n}\\r\\n\\r\\n.tag-button[_ngcontent-%COMP%] {\\r\\n    border-radius: 25px;\\r\\n    margin-right: 15px;\\r\\n    color: black;\\r\\n    background-color: #5FC1AC;\\r\\n}\\r\\n\\r\\n#recipe-description[_ngcontent-%COMP%]{\\r\\n    background-color: #b0e2d7;\\r\\n    color: black;\\r\\n    border-radius: 25px;\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\nimg[_ngcontent-%COMP%]{\\r\\n  height: 300px;\\r\\n  width: 300px;\\r\\n  object-fit: cover;\\r\\n  border-radius: 25px;\\r\\n}\\r\\n\\r\\n#image-ingredients[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-direction: row;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvcmVjaXBlLWRldGFpbHMvcmVjaXBlLWRldGFpbHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixjQUFjO0lBQ2QsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLGFBQWE7QUFDakI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiI2RpYWxvZy1oZWFkZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbn1cclxuXHJcbiNyZWNpcGVOYW1lIHtcclxuICAgIHdpZHRoOiA4MDBweDtcclxufVxyXG5cclxuLmNlbnRlcmVkSW1hZ2Uge1xyXG4gICAgbWFyZ2luOiAxMHB4IGF1dG8gMjBweDtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcclxufVxyXG5cclxuLmhlYWRlcnN7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHBhZGRpbmctdG9wOiAxNXB4O1xyXG59XHJcblxyXG4udGFnLWJ1dHRvbiB7XHJcbiAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzVGQzFBQztcclxufVxyXG5cclxuI3JlY2lwZS1kZXNjcmlwdGlvbntcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiMGUyZDc7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbiAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufVxyXG5cclxuaW1ne1xyXG4gIGhlaWdodDogMzAwcHg7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XHJcbn1cclxuXHJcbiNpbWFnZS1pbmdyZWRpZW50cyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAAmBA,eAAe,QAAqB,0BAA0B;;;;;;;;ICmBzEC,0BAAoD;IAClDA,YACF;IAAAA,iBAAK;;;;IADHA,eACF;IADEA,8CACF;;;;;IAONA,kCAA+E;IAAAA,YAAQ;IAAAA,iBAAS;;;;IAAjBA,eAAQ;IAARA,6BAAQ;;;ADnBzF,OAAM,MAAOC,sBAAsB;EAKjCC,YACSC,SAA+C,EACtBC,IAAgB;IADzC,cAAS,GAATD,SAAS;IACgB,SAAI,GAAJC,IAAI;IAS/B,SAAI,GAAG,iBAAiB;IAR3B,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,oBAAoB,GAAG,EAAE;EAChC;EAEFC,SAAS;IACP,IAAI,CAACJ,SAAS,CAACK,KAAK,EAAE;EACxB;EAGAC,aAAa,CAACC,OAAe;IAC3B,IAAI,CAACC,IAAI,GAAGD,OAAO;EACrB;EAEAE,QAAQ;IACN,IAAI,CAACC,cAAc,GAAG,IAAI,CAACT,IAAI,CAACS,cAAc;IAC9C,IAAI,CAACR,WAAW,GAAG,IAAI,CAACS,mBAAmB,CAAC,IAAI,CAACD,cAAc,CAAC;IAChE,IAAI,CAACP,oBAAoB,GAAG,IAAI,CAACS,4BAA4B,CAAC,IAAI,CAACV,WAAW,CAAC;EACjF;EAEAW,YAAY;IACV,IAAI,CAACb,SAAS,CAACK,KAAK,EAAE;EACxB;EAEAM,mBAAmB,CAACG,MAAc;IAEhCA,MAAM,CAACC,eAAe,CAACC,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAI;MAC9C,IAAIC,IAAI,GAAe;QACrB,MAAM,EAAEF,KAAK;QACb,SAAS,EAAEH,MAAM,CAACM,kBAAkB,CAACF,KAAK;OAC3C;MACD,IAAI,CAAChB,WAAW,CAACmB,IAAI,CAACF,IAAI,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACjB,WAAW;EACzB;EAEAU,4BAA4B,CAACV,WAAyB;IACpDA,WAAW,CAACc,OAAO,CAAEC,KAAK,IAAI;MAC5B,IAAIE,IAAI,GAAWF,KAAK,CAACK,IAAI;MAC7B,IAAGL,KAAK,CAACM,OAAO,IAAI,EAAE,IAAIN,KAAK,CAACM,OAAO,IAAI,IAAI,EAAC;QAC9CJ,IAAI,GAAGA,IAAI,CAACK,MAAM,CAAC,KAAK,GAAGP,KAAK,CAACM,OAAO,CAAC;;MAE3C,IAAI,CAACpB,oBAAoB,CAACkB,IAAI,CAACF,IAAI,CAAC;IACtC,CAAC,CAAC;IAEF,OAAO,IAAI,CAAChB,oBAAoB;EAClC;;AAtDWL,sBAAsB;mBAAtBA,sBAAsB,8DAOvBF,eAAe;AAAA;AAPdE,sBAAsB;QAAtBA,sBAAsB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVnChC,8BAAwB;MACeA,YAAuB;MAAAA,iBAAK;MAEjEA,6CAAiC;MAEnBA,qBAAK;MAAAA,iBAAW;MAMhCA,6CAA2C;MAGvCA,yBAAwD;MAExDA,4BAAK;MACyCA,uCAAqB;MAAAA,iBAAK;MAEtEA,8BAAoC;MAClCA,uEAEK;MACPA,iBAAK;MAMTA,gFAAgG;MAGhGA,+BAAoB;MAAAA,iCAAgB;MAAAA,iBAAK;MACvCA,8BAA2B;MAAAA,aAA+B;MAAAA,iBAAI;;;MAhC3BA,eAAuB;MAAvBA,6CAAuB;MAa/BA,eAA4B;MAA5BA,gEAA4B;MAMxBA,eAAuB;MAAvBA,kDAAuB;MASDA,eAAsB;MAAtBA,iDAAsB;MAIhDA,eAA+B;MAA/BA,qDAA+B","names":["MAT_DIALOG_DATA","i0","RecipeDetailsComponent","constructor","dialogRef","data","ingredients","ingredientsAsStrings","onNoClick","close","markFavourite","newIcon","icon","ngOnInit","selectedRecipe","generateIngredients","generateIngredientsAsStrings","onCloseClick","recipe","ingredientNames","forEach","value","index","temp","ingredientMeasures","push","name","measure","concat","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\shared\\components\\recipe-details\\recipe-details.component.ts","C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\shared\\components\\recipe-details\\recipe-details.component.html"],"sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\r\nimport {MatDialog, MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport { Recipe } from 'src/app/models/recipe';\r\nimport { RecipeService } from 'src/app/services/recipe.service';\r\n\r\n@Component({\r\n  selector: 'app-recipe-details',\r\n  templateUrl: './recipe-details.component.html',\r\n  styleUrls: ['./recipe-details.component.css']\r\n})\r\nexport class RecipeDetailsComponent implements OnInit {\r\n  selectedRecipe: Recipe;\r\n  ingredients: Ingredient[];\r\n  ingredientsAsStrings: string[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<RecipeDetailsComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n      this.ingredients = [];\r\n      this.ingredientsAsStrings = [];\r\n    }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public icon = 'favorite_border'\r\n  markFavourite(newIcon: string){\r\n    this.icon = newIcon;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.selectedRecipe = this.data.selectedRecipe;\r\n    this.ingredients = this.generateIngredients(this.selectedRecipe);\r\n    this.ingredientsAsStrings = this.generateIngredientsAsStrings(this.ingredients);\r\n  }\r\n\r\n  onCloseClick() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  generateIngredients(recipe: Recipe): Ingredient[]{\r\n\r\n    recipe.ingredientNames.forEach((value, index) => {\r\n      var temp: Ingredient = {\r\n        \"name\": value,\r\n        \"measure\": recipe.ingredientMeasures[index]\r\n      }\r\n      this.ingredients.push(temp);\r\n    });\r\n\r\n    return this.ingredients;\r\n  }\r\n\r\n  generateIngredientsAsStrings(ingredients: Ingredient[]): string[] {\r\n    ingredients.forEach((value) => {\r\n      var temp: string = value.name;\r\n      if(value.measure != \"\" && value.measure != null){\r\n        temp = temp.concat(\" - \" + value.measure)\r\n      }\r\n      this.ingredientsAsStrings.push(temp);\r\n    });\r\n\r\n    return this.ingredientsAsStrings;\r\n  }\r\n}\r\n\r\nexport interface DialogData {\r\n  selectedRecipe: Recipe\r\n}\r\n\r\nexport interface Ingredient {\r\n  name: string;\r\n  measure: string;\r\n}\r\n","<div id=\"dialog-header\">\r\n  <h3 mat-dialog-title id=\"recipeName\">{{selectedRecipe.name}}</h3>\r\n\r\n  <mat-dialog-actions id=\"actions\">\r\n    <button mat-mini-fab mat-dialog-close id=\"close-button\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n\r\n\r\n<mat-dialog-content class=\"mat-typography\">\r\n\r\n  <div id=\"image-ingredients\">\r\n    <img class=\"centeredImage\" [src]=\"selectedRecipe.image\">\r\n\r\n    <div>\r\n      <h4 class=\"headers\" id=\"ingredientsHeader\"> Here's what you need!</h4>\r\n\r\n      <ul style=\"list-style-type:circle;\">\r\n        <li *ngFor=\"let ingredient of ingredientsAsStrings\">\r\n          {{ingredient}}\r\n        </li>\r\n      </ul>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <button mat-button class=\"tag-button\" *ngFor=\"let tags of selectedRecipe.tags\">{{tags}}</button>\r\n\r\n\r\n  <h4 class=\"headers\">How to make it: </h4>\r\n    <p id=\"recipe-description\">{{selectedRecipe.instructions}}</p>\r\n</mat-dialog-content>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}