{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/IdeaPad 100-15IBD/Desktop/HdM/3-Semester/SE3/se3project/Angular/se3-recipe-generator-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/form-field\";\nexport class AccountViewComponent {\n  constructor(_accountService, router, snackBar, dialog) {\n    this._accountService = _accountService;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.dialog = dialog;\n    this.isDisabled = true;\n    this.btnText = \"Edit\";\n    this.fakePassword = \"*********\";\n    this.fakeSecurityAnswer = \"*********\";\n    this.account = {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      securityQuestion: \"\",\n      securityAnswer: \"\"\n    };\n    this.selectedSecurityQuestion = {\n      enumValue: \"\",\n      text: \"\"\n    };\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.account = yield _this._accountService.getAccountInfo();\n      _this.securityQuestions = yield _this._accountService.getSecurityQuestions();\n      _this.selectedSecurityQuestion = _this.getSecurityQuestion(true, _this.account.securityQuestion);\n    })();\n  }\n  navigateToUpdateAccount() {\n    this.router.navigate(['update_account']);\n  }\n  changeDisabled() {\n    if (this.isDisabled) {\n      this.isDisabled = false;\n      this.btnText = \"Save\";\n      this.fakePassword = this.account.password;\n      this.fakeSecurityAnswer = this.account.securityAnswer;\n    } else {\n      if (this.everythingIsFine()) {\n        this.isDisabled = true;\n        this.btnText = \"Edit\";\n        this.account.password = this.fakePassword;\n        this.fakePassword = \"*********\";\n        this.account.securityQuestion = this.getSecurityQuestion(false, this.selectedSecurityQuestion.text).enumValue;\n        this.account.securityAnswer = this.fakeSecurityAnswer;\n        this.fakeSecurityAnswer = \"*********\";\n      } else {\n        let config = new MatSnackBarConfig();\n        config.panelClass = ['my-snackbar'];\n        this.snackBar.open(\"Make sure there are no empty fields.\", \"Ok\", config);\n      }\n    }\n  }\n  getSecurityQuestion(enumToText, input) {\n    if (enumToText) {\n      for (let question of this.securityQuestions) {\n        if (question.enumValue === input) {\n          return question;\n        }\n      }\n    } else {\n      for (let question of this.securityQuestions) {\n        if (question.text === input) {\n          return question;\n        }\n      }\n    }\n    return {\n      \"enumValue\": \"\",\n      \"text\": \"\"\n    };\n  }\n  everythingIsFine() {\n    if (this.account.name === \"\") {\n      return false;\n    }\n    if (this.account.email === \"\") {\n      return false;\n    }\n    if (this.fakePassword === \"\") {\n      return false;\n    }\n    if (this.fakeSecurityAnswer === \"\") {\n      return false;\n    }\n    return true;\n  }\n  updateAccount() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let response = yield _this2._accountService.updateAccountInfo(_this2.account);\n      console.log(response);\n    })();\n  }\n  deleteAccount() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const dialogRef = _this3.dialog.open(DeleteAccountDialog, {\n        width: '250px',\n        data: {\n          wantsToDelete: false\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result.wantsToDelete) {\n          _this3._accountService.deleteAccount();\n          console.log(\"Deleted account\");\n          _this3.router.navigate(['login']);\n        }\n      });\n    })();\n  }\n}\nAccountViewComponent.ɵfac = function AccountViewComponent_Factory(t) {\n  return new (t || AccountViewComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.MatDialog));\n};\nAccountViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AccountViewComponent,\n  selectors: [[\"app-account-view\"]],\n  decls: 25,\n  vars: 7,\n  consts: [[1, \"parent\"], [1, \"profile-card\"], [\"mat-raised-button\", \"\", 1, \"btn\", 3, \"click\"], [1, \"profile-info-section\"], [1, \"info-block\"], [\"type\", \"email\", \"matInput\", \"\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"]],\n  template: function AccountViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"h1\");\n      i0.ɵɵtext(4, \"Account Settings\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AccountViewComponent_Template_button_click_5_listener() {\n        return ctx.changeDisabled();\n      });\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 3)(8, \"div\", 4)(9, \"h3\");\n      i0.ɵɵtext(10, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"mat-form-field\")(12, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function AccountViewComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.account.name = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"div\", 4)(14, \"h3\");\n      i0.ɵɵtext(15, \"E-Mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"mat-form-field\")(17, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function AccountViewComponent_Template_input_ngModelChange_17_listener($event) {\n        return ctx.account.email = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"div\", 4)(19, \"h3\");\n      i0.ɵɵtext(20, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"mat-form-field\")(22, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function AccountViewComponent_Template_input_ngModelChange_22_listener($event) {\n        return ctx.fakePassword = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(23, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AccountViewComponent_Template_button_click_23_listener() {\n        return ctx.deleteAccount();\n      });\n      i0.ɵɵtext(24, \"Delete account\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate(ctx.btnText);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.account.name)(\"disabled\", ctx.isDisabled);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.account.email)(\"disabled\", ctx.isDisabled);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.fakePassword)(\"disabled\", ctx.isDisabled);\n    }\n  },\n  dependencies: [i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i6.MatButton, i7.MatCard, i7.MatCardHeader, i8.MatInput, i9.MatFormField],\n  styles: [\".parent[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n.profile-card[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    margin-top: 30px;\\r\\n    border-radius: 25px;\\r\\n    min-width: 400px;\\r\\n    width: 600px;\\r\\n}\\r\\n\\r\\nmat-card-header[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-direction: row;\\r\\n  width: 100%;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\nh1[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  color: white;\\r\\n  margin-right: 50px;\\r\\n}\\r\\n\\r\\nh3[_ngcontent-%COMP%] {\\r\\n  color: white;\\r\\n}\\r\\n\\r\\nmat-card-header[_ngcontent-%COMP%] {\\r\\n  height: -moz-fit-content;\\r\\n  height: fit-content;\\r\\n}\\r\\n\\r\\n.info-block[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: flex-start;\\r\\n}\\r\\n\\r\\n.profile-info-section[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    flex-direction: column;\\r\\n    margin: 20px;\\r\\n}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {\\r\\n  background-color: #D0F4EC;\\r\\n  color: black;\\r\\n  width: 130px;\\r\\n\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9hY2NvdW50LXZpZXcvYWNjb3VudC12aWV3LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0FBQ3pCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsWUFBWTtBQUNoQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsV0FBVztFQUNYLDhCQUE4QjtFQUM5QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHdCQUFtQjtFQUFuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLFlBQVk7QUFDaEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLFlBQVk7O0FBRWQiLCJzb3VyY2VzQ29udGVudCI6WyIucGFyZW50IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG4ucHJvZmlsZS1jYXJkIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xyXG4gICAgbWluLXdpZHRoOiA0MDBweDtcclxuICAgIHdpZHRoOiA2MDBweDtcclxufVxyXG5cclxubWF0LWNhcmQtaGVhZGVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbmgxIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgbWFyZ2luLXJpZ2h0OiA1MHB4O1xyXG59XHJcblxyXG5oMyB7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG5tYXQtY2FyZC1oZWFkZXIge1xyXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XHJcbn1cclxuXHJcbi5pbmZvLWJsb2NrIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbn1cclxuXHJcbi5wcm9maWxlLWluZm8tc2VjdGlvbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luOiAyMHB4O1xyXG59XHJcblxyXG4uYnRuIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRDBGNEVDO1xyXG4gIGNvbG9yOiBibGFjaztcclxuICB3aWR0aDogMTMwcHg7XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\nlet DeleteAccountDialog = class DeleteAccountDialog {\n  constructor(dialogRef, data) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.wantsToDelete = false;\n  }\n  onYesClick() {\n    this.data.wantsToDelete = true;\n    this.dialogRef.close(this.data);\n  }\n  onNoClick() {\n    this.data.wantsToDelete = false;\n    this.dialogRef.close(this.data);\n  }\n};\nDeleteAccountDialog = __decorate([Component({\n  selector: 'dialog-delete-account-dialog',\n  templateUrl: 'dialog-delete-account.html'\n}), __param(1, Inject(MAT_DIALOG_DATA))], DeleteAccountDialog);\nexport { DeleteAccountDialog };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAmC,eAAe;AAK5E,SAAsBC,iBAAiB,QAAQ,6BAA6B;AAC5E,SAAkCC,eAAe,QAAQ,0BAA0B;;;;;;;;;;;AAOnF,OAAM,MAAOC,oBAAoB;EAW/BC,YAAoBC,eAA+B,EACzCC,MAAc,EACdC,QAAqB,EACtBC,MAAiB;IAHN,oBAAe,GAAfH,eAAe;IACzB,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IACT,WAAM,GAANC,MAAM;IATf,eAAU,GAAY,IAAI;IAC1B,YAAO,GAAW,MAAM;IACxB,iBAAY,GAAW,WAAW;IAClC,uBAAkB,GAAW,WAAW;IAOtC,IAAI,CAACC,OAAO,GAAG;MACbC,EAAE,EAAE,EAAE;MACNC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE,EAAE;MACpBC,cAAc,EAAE;KACjB;IAED,IAAI,CAACC,wBAAwB,GAAG;MAACC,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAC;EAE3D;EAEMC,QAAQ;IAAA;IAAA;MACZ,KAAI,CAACV,OAAO,SAAS,KAAI,CAACJ,eAAe,CAACe,cAAc,EAAE;MAC1D,KAAI,CAACC,iBAAiB,SAAS,KAAI,CAAChB,eAAe,CAACiB,oBAAoB,EAAE;MAC1E,KAAI,CAACN,wBAAwB,GAAG,KAAI,CAACO,mBAAmB,CAAC,IAAI,EAAE,KAAI,CAACd,OAAO,CAACK,gBAAgB,CAAC;IAAA;EAC/F;EAEAU,uBAAuB;IACrB,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;EAC1C;EAEAC,cAAc;IACZ,IAAG,IAAI,CAACC,UAAU,EAAE;MAClB,IAAI,CAACA,UAAU,GAAG,KAAK;MACvB,IAAI,CAACC,OAAO,GAAG,MAAM;MACrB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACpB,OAAO,CAACI,QAAQ;MACzC,IAAI,CAACiB,kBAAkB,GAAG,IAAI,CAACrB,OAAO,CAACM,cAAc;KACtD,MACI;MACH,IAAG,IAAI,CAACgB,gBAAgB,EAAE,EAAE;QAC1B,IAAI,CAACJ,UAAU,GAAG,IAAI;QACtB,IAAI,CAACC,OAAO,GAAG,MAAM;QACrB,IAAI,CAACnB,OAAO,CAACI,QAAQ,GAAG,IAAI,CAACgB,YAAY;QACzC,IAAI,CAACA,YAAY,GAAG,WAAW;QAC/B,IAAI,CAACpB,OAAO,CAACK,gBAAgB,GAAG,IAAI,CAACS,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAACP,wBAAwB,CAACE,IAAI,CAAC,CAACD,SAAS;QAC7G,IAAI,CAACR,OAAO,CAACM,cAAc,GAAG,IAAI,CAACe,kBAAkB;QACrD,IAAI,CAACA,kBAAkB,GAAG,WAAW;OACtC,MACI;QACH,IAAIE,MAAM,GAAG,IAAI/B,iBAAiB,EAAE;QACpC+B,MAAM,CAACC,UAAU,GAAG,CAAC,aAAa,CAAC;QACnC,IAAI,CAAC1B,QAAQ,CAAC2B,IAAI,CAAC,sCAAsC,EAAE,IAAI,EAAEF,MAAM,CAAC;;;EAG9E;EAEAT,mBAAmB,CAACY,UAAmB,EAAEC,KAAa;IACpD,IAAGD,UAAU,EAAE;MACb,KAAI,IAAIE,QAAQ,IAAI,IAAI,CAAChB,iBAAiB,EAAE;QAC1C,IAAGgB,QAAQ,CAACpB,SAAS,KAAKmB,KAAK,EAAE;UAC/B,OAAOC,QAAQ;;;KAGpB,MACI;MACH,KAAI,IAAIA,QAAQ,IAAI,IAAI,CAAChB,iBAAiB,EAAE;QAC1C,IAAGgB,QAAQ,CAACnB,IAAI,KAAKkB,KAAK,EAAE;UAC1B,OAAOC,QAAQ;;;;IAKrB,OAAO;MAAC,WAAW,EAAE,EAAE;MAAE,MAAM,EAAE;IAAE,CAAC;EACtC;EAEAN,gBAAgB;IACd,IAAG,IAAI,CAACtB,OAAO,CAACE,IAAI,KAAK,EAAE,EAAC;MAE1B,OAAO,KAAK;;IAEd,IAAG,IAAI,CAACF,OAAO,CAACG,KAAK,KAAK,EAAE,EAAC;MAE3B,OAAO,KAAK;;IAEd,IAAG,IAAI,CAACiB,YAAY,KAAK,EAAE,EAAC;MAE1B,OAAO,KAAK;;IAEd,IAAG,IAAI,CAACC,kBAAkB,KAAK,EAAE,EAAC;MAEhC,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAEMQ,aAAa;IAAA;IAAA;MACjB,IAAIC,QAAQ,SAAkB,MAAI,CAAClC,eAAe,CAACmC,iBAAiB,CAAC,MAAI,CAAC/B,OAAO,CAAC;MAClFgC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IAAA;EACvB;EAEMI,aAAa;IAAA;IAAA;MAEjB,MAAMC,SAAS,GAAG,MAAI,CAACpC,MAAM,CAAC0B,IAAI,CAACW,mBAAmB,EAAE;QACpDC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE;UACJC,aAAa,EAAE;;OAEpB,CAAC;MACFJ,SAAS,CAACK,WAAW,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;QACzC,IAAGA,MAAM,CAACH,aAAa,EAAE;UACvB,MAAI,CAAC3C,eAAe,CAACsC,aAAa,EAAE;UACpCF,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B,MAAI,CAACpC,MAAM,CAACmB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;MAGnC,CAAC,CAAC;IAAA;EAEJ;;AA5HWtB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAiD;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCbjCC,8BAAoB;MAGVA,gCAAgB;MAAAA,iBAAK;MACzBA,iCAAiE;MAA3BA;QAAA,OAASC,oBAAgB;MAAA,EAAC;MAACD,YAAW;MAAAA,iBAAS;MAGvFA,8BAAkC;MAGxBA,qBAAI;MAAAA,iBAAK;MACbA,uCAAgB;MACeA;QAAA;MAAA,EAA0B;MAAvDA,iBAAgF;MAItFA,+BAAwB;MAChBA,uBAAM;MAAAA,iBAAK;MACfA,uCAAgB;MACeA;QAAA;MAAA,EAA2B;MAAxDA,iBAAiF;MAIvFA,+BAAwB;MAChBA,yBAAQ;MAAAA,iBAAK;MACjBA,uCAAgB;MACeA;QAAA;MAAA,EAA0B;MAAvDA,iBAAgF;MAItFA,kCAAgE;MAA1BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,+BAAc;MAAAA,iBAAS;;;MA1BtBA,eAAW;MAAXA,iCAAW;MAQzCA,eAA0B;MAA1BA,0CAA0B;MAO1BA,eAA2B;MAA3BA,2CAA2B;MAO3BA,eAA0B;MAA1BA,0CAA0B;;;;;;ADuH5D,IAAMZ,mBAAmB,GAAzB,MAAMA,mBAAmB;EAI9BzC,YAAmBwC,SAA4C,EAC7BG,IAAS;IADxB,cAAS,GAATH,SAAS;IACM,SAAI,GAAJG,IAAI;IAHtC,kBAAa,GAAY,KAAK;EAI5B;EAEFY,UAAU;IACR,IAAI,CAACZ,IAAI,CAACC,aAAa,GAAG,IAAI;IAC9B,IAAI,CAACJ,SAAS,CAACgB,KAAK,CAAC,IAAI,CAACb,IAAI,CAAC;EACjC;EAEAc,SAAS;IACP,IAAI,CAACd,IAAI,CAACC,aAAa,GAAG,KAAK;IAC/B,IAAI,CAACJ,SAAS,CAACgB,KAAK,CAAC,IAAI,CAACb,IAAI,CAAC;EACjC;CACD;AAjBYF,mBAAmB,eAJ/B9C,SAAS,CAAC;EACT+D,QAAQ,EAAE,8BAA8B;EACxCC,WAAW,EAAE;CACd,CAAC,EAMGC,iBAAM,CAAC9D,eAAe,CAAC,IALf2C,mBAAmB,CAiB/B;SAjBYA,mBAAmB","names":["Component","Inject","MatSnackBarConfig","MAT_DIALOG_DATA","AccountViewComponent","constructor","_accountService","router","snackBar","dialog","account","id","name","email","password","securityQuestion","securityAnswer","selectedSecurityQuestion","enumValue","text","ngOnInit","getAccountInfo","securityQuestions","getSecurityQuestions","getSecurityQuestion","navigateToUpdateAccount","navigate","changeDisabled","isDisabled","btnText","fakePassword","fakeSecurityAnswer","everythingIsFine","config","panelClass","open","enumToText","input","question","updateAccount","response","updateAccountInfo","console","log","deleteAccount","dialogRef","DeleteAccountDialog","width","data","wantsToDelete","afterClosed","subscribe","result","selectors","decls","vars","consts","template","i0","ctx","onYesClick","close","onNoClick","selector","templateUrl","__param"],"sourceRoot":"","sources":["C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\account-view\\account-view.component.ts","C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\account-view\\account-view.component.html"],"sourcesContent":["import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Account } from 'src/app/models/account';\r\nimport { ISecurityQuestion } from 'src/app/models/securityQuestions'\r\nimport { AccountService } from 'src/app/services/account.service';\r\nimport { Router} from '@angular/router';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-account-view',\r\n  templateUrl: './account-view.component.html',\r\n  styleUrls: ['./account-view.component.css'],\r\n})\r\nexport class AccountViewComponent implements OnInit {\r\n  account: Account;\r\n  securityQuestions: ISecurityQuestion[];\r\n  selectedSecurityQuestion: ISecurityQuestion;\r\n\r\n  isDisabled: boolean = true;\r\n  btnText: string = \"Edit\";\r\n  fakePassword: string = \"*********\"\r\n  fakeSecurityAnswer: string = \"*********\"\r\n  messege: string;\r\n\r\n  constructor(private _accountService: AccountService,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    public dialog: MatDialog){\r\n    this.account = {\r\n      id: \"\",\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      securityQuestion: \"\",\r\n      securityAnswer: \"\"\r\n    }\r\n\r\n    this.selectedSecurityQuestion = {enumValue: \"\", text: \"\"}\r\n\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.account = await this._accountService.getAccountInfo()\r\n    this.securityQuestions = await this._accountService.getSecurityQuestions()\r\n    this.selectedSecurityQuestion = this.getSecurityQuestion(true, this.account.securityQuestion)\r\n  }\r\n\r\n  navigateToUpdateAccount(){\r\n    this.router.navigate(['update_account'])\r\n  }\r\n\r\n  changeDisabled() {\r\n    if(this.isDisabled) {\r\n      this.isDisabled = false;\r\n      this.btnText = \"Save\"\r\n      this.fakePassword = this.account.password;\r\n      this.fakeSecurityAnswer = this.account.securityAnswer;\r\n    }\r\n    else {\r\n      if(this.everythingIsFine()) {\r\n        this.isDisabled = true;\r\n        this.btnText = \"Edit\"\r\n        this.account.password = this.fakePassword;\r\n        this.fakePassword = \"*********\";\r\n        this.account.securityQuestion = this.getSecurityQuestion(false, this.selectedSecurityQuestion.text).enumValue;\r\n        this.account.securityAnswer = this.fakeSecurityAnswer;\r\n        this.fakeSecurityAnswer = \"*********\"\r\n      }\r\n      else {\r\n        let config = new MatSnackBarConfig();\r\n        config.panelClass = ['my-snackbar']\r\n        this.snackBar.open(\"Make sure there are no empty fields.\", \"Ok\", config);\r\n      }\r\n    }\r\n  }\r\n\r\n  getSecurityQuestion(enumToText: boolean, input: string): ISecurityQuestion {\r\n    if(enumToText) {\r\n      for(let question of this.securityQuestions) {\r\n        if(question.enumValue === input) {\r\n          return question;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      for(let question of this.securityQuestions) {\r\n        if(question.text === input) {\r\n          return question;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\"enumValue\": \"\", \"text\": \"\"};\r\n  }\r\n\r\n  everythingIsFine(): boolean {\r\n    if(this.account.name === \"\"){\r\n\r\n      return false;\r\n    }\r\n    if(this.account.email === \"\"){\r\n\r\n      return false;\r\n    }\r\n    if(this.fakePassword === \"\"){\r\n\r\n      return false;\r\n    }\r\n    if(this.fakeSecurityAnswer === \"\"){\r\n\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async updateAccount() {\r\n    let response: Account = await this._accountService.updateAccountInfo(this.account)\r\n    console.log(response)\r\n  }\r\n\r\n  async deleteAccount() {\r\n\r\n    const dialogRef = this.dialog.open(DeleteAccountDialog, {\r\n        width: '250px',\r\n        data: {\r\n          wantsToDelete: false\r\n        },\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if(result.wantsToDelete) {\r\n        this._accountService.deleteAccount()\r\n        console.log(\"Deleted account\")\r\n        this.router.navigate(['login']);\r\n      }\r\n\r\n    })\r\n\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'dialog-delete-account-dialog',\r\n  templateUrl: 'dialog-delete-account.html',\r\n})\r\nexport class DeleteAccountDialog {\r\n\r\n  wantsToDelete: boolean = false\r\n\r\n  constructor(public dialogRef: MatDialogRef<DeleteAccountDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    }\r\n\r\n  onYesClick(): void {\r\n    this.data.wantsToDelete = true;\r\n    this.dialogRef.close(this.data)\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.data.wantsToDelete = false;\r\n    this.dialogRef.close(this.data)\r\n  }\r\n}\r\n","<div class=\"parent\">\r\n  <mat-card class=\"profile-card\">\r\n    <mat-card-header>\r\n      <h1>Account Settings</h1>\r\n      <button mat-raised-button class=\"btn\" (click)=\"changeDisabled()\">{{btnText}}</button>\r\n    </mat-card-header>\r\n\r\n    <div class=\"profile-info-section\">\r\n\r\n      <div class=\"info-block\">\r\n          <h3>Name</h3>\r\n          <mat-form-field>\r\n            <input type=\"email\" matInput [(ngModel)]=\"account.name\" [disabled]=\"isDisabled\">\r\n          </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"info-block\">\r\n          <h3>E-Mail</h3>\r\n          <mat-form-field>\r\n            <input type=\"email\" matInput [(ngModel)]=\"account.email\" [disabled]=\"isDisabled\">\r\n          </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"info-block\">\r\n          <h3>Password</h3>\r\n          <mat-form-field>\r\n            <input type=\"email\" matInput [(ngModel)]=\"fakePassword\" [disabled]=\"isDisabled\">\r\n          </mat-form-field>\r\n      </div>\r\n\r\n      <button mat-raised-button class=\"btn\" (click)=\"deleteAccount()\">Delete account</button>\r\n\r\n\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}