{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/IdeaPad 100-15IBD/Desktop/HdM/3-Semester/SE3/se3project/Angular/se3-recipe-generator-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\nimport { throwError } from 'rxjs';\nlet SignUpComponent = class SignUpComponent {\n  constructor(_formBuilder, _accountService, _authService, router, _snackBar) {\n    this._formBuilder = _formBuilder;\n    this._accountService = _accountService;\n    this._authService = _authService;\n    this.router = router;\n    this._snackBar = _snackBar;\n    this.visible = true;\n    this.changetype = true;\n    this.visible1 = true;\n    this.changetype1 = true;\n    this.visible2 = true;\n    this.changetype2 = true;\n  }\n  ngOnInit() {\n    this.getSecQuestions();\n    this.firstFormGroup = this._formBuilder.group({\n      username: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n      password: [null, Validators.required],\n      passwordRepeat: new FormControl(\"\", Validators.required)\n    }, {\n      validator: this.ConfirmedValidator(\"password\", \"passwordRepeat\") //works both ways\n    });\n\n    this.secondFormGroup = this._formBuilder.group({\n      securityQuestion: [null, Validators.required],\n      securityAnswer: [null, Validators.required]\n    });\n  }\n  getSecQuestions() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const res = yield _this._accountService.getSecurityQuestions();\n      _this.securityQuestions = res;\n    })();\n  }\n  ConfirmedValidator(controlName, matchingControlName) {\n    return formGroup => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n      if (matchingControl.errors && !matchingControl.errors['confirmedValidator']) {\n        return;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({\n          confirmedValidator: true\n        });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    };\n  }\n  onSignUp() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.firstFormGroup.valid && _this2.secondFormGroup.valid) {\n        _this2.account = {\n          id: \"\",\n          name: _this2.firstFormGroup.get('username')?.value,\n          email: _this2.firstFormGroup.get('email')?.value,\n          password: _this2.firstFormGroup.get('password')?.value,\n          securityQuestion: _this2.secondFormGroup.get('securityQuestion')?.value,\n          securityAnswer: _this2.secondFormGroup.get('securityAnswer')?.value\n        };\n        const res = yield _this2._accountService.createAccount(_this2.account);\n        _this2.account = res; //to get the actual id\n        _this2.firstFormGroup.reset(); //check if you actually need it\n        _this2.secondFormGroup.reset(); //same as above\n        _this2._accountService.sendOwnerAccountToServices(res.id);\n        _this2._authService.login();\n      } else if (_this2.firstFormGroup.invalid || _this2.secondFormGroup.invalid) {\n        _this2._snackBar.open('Invalid input. Please look at the errors and try again.', 'Ok', {\n          duration: 5000\n        });\n        return;\n      } else {\n        err => {\n          console.log(err);\n          _this2.handleError(err);\n        };\n      }\n    })();\n  }\n  viewpass(whichOne) {\n    if (whichOne == 1) {\n      this.visible1 = !this.visible1;\n      this.changetype1 = !this.changetype1;\n    } else if (whichOne == 2) {\n      this.visible2 = !this.visible2;\n      this.changetype2 = !this.changetype2;\n    }\n  }\n  handleError(err) {\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      // if error is client-side error\n      errorMessage = `Error: ${err.message}`;\n    } else {\n      // if error is server-side error\n      errorMessage = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    }\n    alert(errorMessage);\n    return throwError(errorMessage);\n  }\n};\nSignUpComponent = __decorate([Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css'],\n  providers: [{\n    provide: STEPPER_GLOBAL_OPTIONS,\n    useValue: {\n      showError: true\n    }\n  }]\n})], SignUpComponent);\nexport { SignUpComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAqBC,WAAW,EAAaC,UAAU,QAAO,gBAAgB;AAG9E,SAAQC,sBAAsB,QAAO,sBAAsB;AAE3D,SAASC,UAAU,QAAQ,MAAM;AAoB1B,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAuB1BC,YAAqBC,YAAyB,EACpCC,eAA+B,EAC/BC,YAAmC,EACnCC,MAAc,EACdC,SAAqB;IAJV,iBAAY,GAAZJ,YAAY;IACvB,oBAAe,GAAfC,eAAe;IACf,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,cAAS,GAATC,SAAS;IAjBnB,YAAO,GAAW,IAAI;IACtB,eAAU,GAAU,IAAI;IAKxB,aAAQ,GAAW,IAAI;IACvB,gBAAW,GAAU,IAAI;IACzB,aAAQ,GAAW,IAAI;IACvB,gBAAW,GAAU,IAAI;EAWzB;EAEAC,QAAQ;IAEN,IAAI,CAACC,eAAe,EAAE;IAEtB,IAAI,CAACC,cAAc,GAAG,IAAI,CAACP,YAAY,CAACQ,KAAK,CAAC;MAC5CC,QAAQ,EAAG,CAAC,IAAI,EAAEd,UAAU,CAACe,QAAQ,CAAC;MACtCC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAChB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,KAAK,CAAC,CAAC;MACtDC,QAAQ,EAAE,CAAC,IAAI,EAAEjB,UAAU,CAACe,QAAQ,CAAC;MACrCG,cAAc,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACe,QAAQ;KACxD,EAAE;MACDI,SAAS,EAAE,IAAI,CAACC,kBAAkB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;KAClE,CAAC;;IAEF,IAAI,CAACC,eAAe,GAAG,IAAI,CAAChB,YAAY,CAACQ,KAAK,CAAC;MAC7CS,gBAAgB,EAAE,CAAC,IAAI,EAAEtB,UAAU,CAACe,QAAQ,CAAC;MAC7CQ,cAAc,EAAE,CAAC,IAAI,EAAEvB,UAAU,CAACe,QAAQ;KAC3C,CAAC;EAEJ;EAEMJ,eAAe;IAAA;IAAA;MACnB,MAAMa,GAAG,SAAc,KAAI,CAAClB,eAAe,CAACmB,oBAAoB,EAAE;MAChE,KAAI,CAACC,iBAAiB,GAAGF,GAAG;IAAC;EACjC;EAEAJ,kBAAkB,CAACO,WAAmB,EAAEC,mBAA2B;IACjE,OAAQC,SAAoB,IAAI;MAC9B,MAAMC,OAAO,GAAGD,SAAS,CAACE,QAAQ,CAACJ,WAAW,CAAC;MAC/C,MAAMK,eAAe,GAAGH,SAAS,CAACE,QAAQ,CAACH,mBAAmB,CAAC;MAC/D,IACEI,eAAe,CAACC,MAAM,IACtB,CAACD,eAAe,CAACC,MAAM,CAAC,oBAAoB,CAAC,EAC7C;QACA;;MAEF,IAAIH,OAAO,CAACI,KAAK,KAAKF,eAAe,CAACE,KAAK,EAAE;QAC3CF,eAAe,CAACG,SAAS,CAAC;UAAEC,kBAAkB,EAAE;QAAI,CAAE,CAAC;OACxD,MAAM;QACLJ,eAAe,CAACG,SAAS,CAAC,IAAI,CAAC;;IAEnC,CAAC;EACH;EAGME,QAAQ;IAAA;IAAA;MAEZ,IAAI,MAAI,CAACzB,cAAc,CAAC0B,KAAK,IAAI,MAAI,CAACjB,eAAe,CAACiB,KAAK,EAAE;QAC3D,MAAI,CAACC,OAAO,GAAG;UACbC,EAAE,EAAE,EAAE;UACNC,IAAI,EAAE,MAAI,CAAC7B,cAAc,CAAC8B,GAAG,CAAC,UAAU,CAAC,EAAER,KAAK;UAChDlB,KAAK,EAAE,MAAI,CAACJ,cAAc,CAAC8B,GAAG,CAAC,OAAO,CAAC,EAAER,KAAK;UAC9CjB,QAAQ,EAAE,MAAI,CAACL,cAAc,CAAC8B,GAAG,CAAC,UAAU,CAAC,EAAER,KAAK;UACpDZ,gBAAgB,EAAE,MAAI,CAACD,eAAe,CAACqB,GAAG,CAAC,kBAAkB,CAAC,EAAER,KAAK;UACrEX,cAAc,EAAE,MAAI,CAACF,eAAe,CAACqB,GAAG,CAAC,gBAAgB,CAAC,EAAER;SAC7D;QAED,MAAMV,GAAG,SAAc,MAAI,CAAClB,eAAe,CAACqC,aAAa,CAAC,MAAI,CAACJ,OAAO,CAAC;QACvE,MAAI,CAACA,OAAO,GAAGf,GAAG,CAAC,CAAC;QAEpB,MAAI,CAACZ,cAAc,CAACgC,KAAK,EAAE,CAAC,CAAE;QAC9B,MAAI,CAACvB,eAAe,CAACuB,KAAK,EAAE,CAAC,CAAC;QAE9B,MAAI,CAACtC,eAAe,CAACuC,0BAA0B,CAACrB,GAAG,CAACgB,EAAE,CAAC;QACvD,MAAI,CAACjC,YAAY,CAACuC,KAAK,EAAE;OAE1B,MACI,IAAG,MAAI,CAAClC,cAAc,CAACmC,OAAO,IAAG,MAAI,CAAC1B,eAAe,CAAC0B,OAAO,EAAC;QACjE,MAAI,CAACtC,SAAS,CAACuC,IAAI,CAAC,yDAAyD,EAAE,IAAI,EAAE;UACnFC,QAAQ,EAAE;SACX,CAAC;QACF;OACD,MACI;QACFC,GAAQ,IAAI;UACXC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;UAChB,MAAI,CAACG,WAAW,CAACH,GAAG,CAAC;QACvB,CAAC;;IACF;EAEH;EAEAI,QAAQ,CAACC,QAAe;IACtB,IAAGA,QAAQ,IAAE,CAAC,EAAC;MACb,IAAI,CAACC,QAAQ,GAAG,CAAC,IAAI,CAACA,QAAQ;MAC9B,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;KACrC,MACI,IAAGF,QAAQ,IAAE,CAAC,EAAC;MAClB,IAAI,CAACG,QAAQ,GAAG,CAAC,IAAI,CAACA,QAAQ;MAC9B,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;;EAExC;EAEAN,WAAW,CAACH,GAA+C;IACzD,IAAIU,YAAY,GAAG,EAAE;IACrB,IAAIV,GAAG,CAACW,KAAK,YAAYC,UAAU,EAAE;MACnC;MACAF,YAAY,GAAG,UAAUV,GAAG,CAACa,OAAO,EAAE;KACvC,MAAM;MACL;MACAH,YAAY,GAAG,eAAeV,GAAG,CAACc,MAAM,cAAcd,GAAG,CAACa,OAAO,EAAE;;IAErEE,KAAK,CAACL,YAAY,CAAC;IACnB,OAAO1D,UAAU,CAAC0D,YAAY,CAAC;EACjC;CACD;AAxIYzD,eAAe,eAX3BL,SAAS,CAAC;EACToE,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB,CAAC;EACtCC,SAAS,EAAE,CACT;IACEC,OAAO,EAAErE,sBAAsB;IAC/BsE,QAAQ,EAAE;MAACC,SAAS,EAAE;IAAI;GAC3B;CAEJ,CAAC,GACWrE,eAAe,CAwI3B;SAxIYA,eAAe","names":["Component","FormControl","Validators","STEPPER_GLOBAL_OPTIONS","throwError","SignUpComponent","constructor","_formBuilder","_accountService","_authService","router","_snackBar","ngOnInit","getSecQuestions","firstFormGroup","group","username","required","email","password","passwordRepeat","validator","ConfirmedValidator","secondFormGroup","securityQuestion","securityAnswer","res","getSecurityQuestions","securityQuestions","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","value","setErrors","confirmedValidator","onSignUp","valid","account","id","name","get","createAccount","reset","sendOwnerAccountToServices","login","invalid","open","duration","err","console","log","handleError","viewpass","whichOne","visible1","changetype1","visible2","changetype2","errorMessage","error","ErrorEvent","message","status","alert","selector","templateUrl","styleUrls","providers","provide","useValue","showError"],"sourceRoot":"","sources":["C:\\Users\\IdeaPad 100-15IBD\\Desktop\\HdM\\3-Semester\\SE3\\se3project\\Angular\\se3-recipe-generator-frontend\\src\\app\\modules\\account-auth\\sign-up\\sign-up.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Account } from 'src/app/models/account';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AccountService } from 'src/app/services/account.service';\r\nimport {STEPPER_GLOBAL_OPTIONS} from '@angular/cdk/stepper';\r\nimport { ISecurityQuestion } from 'src/app/models/securityQuestions';\r\nimport { throwError } from 'rxjs';\r\n<<<<<<< HEAD\r\nimport { AuthenticationService } from 'src/app/services/authentication.service';\r\n=======\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatStepper} from '@angular/material/stepper';\r\n>>>>>>> frontend/hotfix\r\n\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.css'],\r\n  providers: [\r\n    {\r\n      provide: STEPPER_GLOBAL_OPTIONS,\r\n      useValue: {showError: true},\r\n    },\r\n  ],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  firstFormGroup: FormGroup;\r\n  secondFormGroup: FormGroup;\r\n  signUpSuccessful: boolean;\r\n\r\n  account: Account;\r\n\r\n  securityQuestions: ISecurityQuestion[]\r\n<<<<<<< HEAD\r\n\r\n  visible:boolean = true;\r\n  changetype:boolean =true;\r\n\r\n=======\r\n>>>>>>> frontend/hotfix\r\n\r\n  visible1:boolean = true;\r\n  changetype1:boolean =true;\r\n  visible2:boolean = true;\r\n  changetype2:boolean =true;\r\n\r\n  isLinear:true;\r\n\r\n  constructor( private _formBuilder: FormBuilder,\r\n    private _accountService: AccountService,\r\n    private _authService: AuthenticationService,\r\n    private router: Router,\r\n    private _snackBar:MatSnackBar,\r\n    ) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.getSecQuestions()\r\n\r\n    this.firstFormGroup = this._formBuilder.group({\r\n      username : [null, Validators.required],\r\n      email: [null, [Validators.required, Validators.email]],\r\n      password: [null, Validators.required],\r\n      passwordRepeat: new FormControl(\"\", Validators.required)\r\n    }, {\r\n      validator: this.ConfirmedValidator(\"password\", \"passwordRepeat\") //works both ways\r\n    });\r\n\r\n    this.secondFormGroup = this._formBuilder.group({\r\n      securityQuestion: [null, Validators.required],\r\n      securityAnswer: [null, Validators.required]\r\n    });\r\n\r\n  }\r\n\r\n  async getSecQuestions() {\r\n    const res: any = await this._accountService.getSecurityQuestions();\r\n      this.securityQuestions = res;\r\n  }\r\n\r\n  ConfirmedValidator(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n      if (\r\n        matchingControl.errors &&\r\n        !matchingControl.errors['confirmedValidator']\r\n      ) {\r\n        return;\r\n      }\r\n      if (control.value !== matchingControl.value) {\r\n        matchingControl.setErrors({ confirmedValidator: true });\r\n      } else {\r\n        matchingControl.setErrors(null);\r\n      }\r\n    };\r\n  }\r\n\r\n\r\n  async onSignUp(){\r\n\r\n    if (this.firstFormGroup.valid && this.secondFormGroup.valid) {\r\n      this.account = {\r\n        id: \"\",\r\n        name: this.firstFormGroup.get('username')?.value,\r\n        email: this.firstFormGroup.get('email')?.value,\r\n        password: this.firstFormGroup.get('password')?.value,\r\n        securityQuestion: this.secondFormGroup.get('securityQuestion')?.value,\r\n        securityAnswer: this.secondFormGroup.get('securityAnswer')?.value\r\n      }\r\n\r\n      const res: any = await this._accountService.createAccount(this.account);\r\n      this.account = res; //to get the actual id\r\n\r\n      this.firstFormGroup.reset();  //check if you actually need it\r\n      this.secondFormGroup.reset(); //same as above\r\n\r\n      this._accountService.sendOwnerAccountToServices(res.id)\r\n      this._authService.login()\r\n\r\n    }\r\n    else if(this.firstFormGroup.invalid ||this.secondFormGroup.invalid){\r\n      this._snackBar.open('Invalid input. Please look at the errors and try again.', 'Ok', {\r\n        duration: 5000,\r\n      });\r\n      return;\r\n    }\r\n    else {\r\n      (err: any) => {\r\n        console.log(err)\r\n        this.handleError(err)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  viewpass(whichOne:number){\r\n    if(whichOne==1){\r\n      this.visible1 = !this.visible1;\r\n      this.changetype1 = !this.changetype1;\r\n    }\r\n    else if(whichOne==2){\r\n      this.visible2 = !this.visible2;\r\n      this.changetype2 = !this.changetype2;\r\n    }\r\n  }\r\n\r\n  handleError(err: { error: any; message: any; status: any; }) {\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      // if error is client-side error\r\n      errorMessage = `Error: ${err.message}`;\r\n    } else {\r\n      // if error is server-side error\r\n      errorMessage = `Error Code: ${err.status}\\nMessage: ${err.message}`;\r\n    }\r\n    alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}